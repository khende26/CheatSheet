package com.company;

import java.awt.*;
import java.sql.Types;

public class DataTypes {
   /* Primitive Data Types  CODE EXAMPLE      DESCRIPTION
    boolean     boolean myBool = false;     stores true or false values
    char        char myCarh = "a";          stores single characters/letters
    byte        byte myByte = 100;          stores whole numbers from -128 to 127
    short       short myShort = 5000;       stores whole numbers from -32768 to 32767
    int         int myInt = 100000;         stores whole numbers from -2.147B to 2.147B
    long        long myLong = 15000000000L; stores whole numbers from -9,223,372,036B to 9,223,372,036B
    float       float myFloat = 5.75f;      stores fractional numbers, sufficient for storing 6 to 7 decimals digits
    double      double myDouble = 19.99d;   stores fractional numbers, sufficient for storing 15 decimal digits

    Non-Primitive Data Types
    Class                                       A class in Java is a user defined data type i.e. it is created by the user.
                                                It acts as a temple to the data which consists of member variables and methods
    Object      Car myCar = new Car();             An object is the variable of the class, which can access the elements of class i.e. methods and variables.
    String      String myString = "name"; or     A string represents a sequence of characters
                String myString = new String();

    Array       int[] myArray = {1,2,3, 6, 9}   An array is a single object that stores multiple variables of the same data type.
                or int[] myArray = new int[5];  The variables can be primitive or non-primitive data types.
    Interface                                   An interface is declared like a class.   The key difference is that the interface contains
                                                methods that are abstract by default; they have no body.

    OPERATOR CATEGORY                   OPERATORS
    Arithmetic operators                +, -, /, *, %
    Relational operators                <, >, <=, >=; ==, !=
    Logical operators                   &&, ||
    Assignment operator                 =, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=
    Increment and Decrement operator    ++, --
    Conditional operators               ?:
    Bitwise operators                   ^, &, |
    Special operators                   . (dot operator to access methods to class)

    RESERVED WORDS          DESCRIPTION
    abstract        used to declare an abstract class
    catch           used to catch exceptions generated by try statements
    class           used to declare a class
    enum            defines a set of constants
    extends         indicates that class is inherited
    final           indicates the value cannot be changed
    finally         used to execute code after the try-catch structure
    implements      used to implement an interface
    new             used to create new objects
    static          used to indicate that a variable or a method is a class method
    super           used to refer to the parent class
    this            used to refer to the current object in a method or constructor
    throw           used to throw an exception explicitly
    throws          used to declare an exception
    try             block of code to handle na exception









    */


    }
}
